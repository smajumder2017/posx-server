generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int         @id @default(autoincrement())
  value     String      @unique
  userRoles UserRoles[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  password  String
  firstName String
  lastName  String
  userName  String      @unique
  contactNo String
  isActive  Boolean
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userShops UserShop[]
  userRoles UserRoles[]
}

model UserRoles {
  id        String   @id @default(uuid())
  userId    String
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
}

model ShopType {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shops     Shop[]
}

model UserShop {
  id        String   @id @default(uuid())
  userId    String
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model Shop {
  id             String         @id @default(uuid())
  shopName       String
  shopCode       String         @db.VarChar(255)
  shopTypeId     Int
  registrationNo String?        @unique
  isActive       Boolean
  contactNo      String
  address        String
  city           String
  state          String
  pincode        String
  latitude       String?
  longitude      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  shopType       ShopType       @relation(fields: [shopTypeId], references: [id])
  userShop       UserShop[]
  menuCategory   MenuCategory[]
  menuItems      MenuItems[]
  license        License[]
}

model License {
  id        String   @id @default(uuid())
  number    String   @unique
  startDate DateTime
  endDate   DateTime
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model MenuCategory {
  id           String      @id @default(uuid())
  categoryName String
  isActive     Boolean
  displayIndex Int
  shopId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  shop         Shop        @relation(fields: [shopId], references: [id])
  menuItems    MenuItems[]
}

model MenuItems {
  id           String       @id @default(uuid())
  itemName     String
  shortCode    String
  description  String
  availability Boolean
  isActive     Boolean
  foodType     String
  price        Float
  waitingTime  Int
  spiceScale   String
  servingTime  ServingTime
  itemImageUrl String
  categoryId   String
  shopId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  category     MenuCategory @relation(fields: [categoryId], references: [id])
  shop         Shop         @relation(fields: [shopId], references: [id])
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  contactNo String   @unique
  gender    Gender
  dob       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum ServingTime {
  BREAKFAST
  LUNCH
  DINNER
  ALL
}
