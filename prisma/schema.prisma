generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int         @id @default(autoincrement())
  value     String      @unique
  userRoles UserRoles[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model User {
  id        String      @id @default(uuid())
  email     String?     @unique
  password  String
  firstName String
  lastName  String
  userName  String      @unique
  contactNo String
  isActive  Boolean
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userShops UserShop[]
  userRoles UserRoles[]
  Order     Order[]
  Billing   Billing[]
}

model UserRoles {
  id        String   @id @default(uuid())
  userId    String
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
}

model ShopType {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shops     Shop[]
}

model UserShop {
  id        String   @id @default(uuid())
  userId    String
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model Shop {
  id                      String         @id @default(uuid())
  shopName                String
  shopCode                String         @db.VarChar(255)
  shopTypeId              Int
  registrationNo          String?        @unique
  isActive                Boolean
  contactNo               String
  address                 String
  city                    String
  state                   String
  pincode                 String
  latitude                String?
  longitude               String?
  gstinNo                 String?
  cgstPercentage          Int?
  sgstPercentage          Int?
  serviceChargePercentage Int?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  shopType                ShopType       @relation(fields: [shopTypeId], references: [id])
  userShop                UserShop[]
  menuCategory            MenuCategory[]
  menuItems               MenuItems[]
  license                 License[]
  Billing                 Billing[]
}

model License {
  id        String   @id @default(uuid())
  number    String   @unique
  startDate DateTime
  endDate   DateTime
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model MenuCategory {
  id           String      @id @default(uuid())
  categoryName String
  isActive     Boolean
  displayIndex Int
  shopId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  shop         Shop        @relation(fields: [shopId], references: [id])
  menuItems    MenuItems[]
}

model MenuItems {
  id            String       @id @default(uuid())
  itemName      String
  shortCode     String
  description   String       @db.Text
  availability  Boolean
  isActive      Boolean
  foodType      String
  price         Float
  waitingTime   Int?
  spiceScale    String
  servingTime   Json?
  itemImageUrl  String?
  remoteImageId String?
  categoryId    String
  shopId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  category      MenuCategory @relation(fields: [categoryId], references: [id])
  shop          Shop         @relation(fields: [shopId], references: [id])
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  contactNo String    @unique
  gender    Gender?
  dob       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
  Billing   Billing[]
}

model OrderStatus {
  id        Int      @id
  value     String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                 String      @id
  orderNumber        String
  shopId             String
  customerId         String?
  employeeId         String?
  orderStatusId      Int
  isClosed           Boolean     @default(false)
  cancellationReason String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  items              OrderItem[]
  orderStatus        OrderStatus @relation(fields: [orderStatusId], references: [id])
  employee           User?       @relation(fields: [employeeId], references: [id])
  customer           Customer?   @relation(fields: [customerId], references: [id])
  bills              Billing[]
}

model OrderItem {
  id              String   @id @default(uuid())
  orderId         String
  itemId          String
  itemName        String
  price           Float
  quantity        Int
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
}

model Billing {
  id             String    @id @default(uuid())
  orderId        String
  shopId         String
  customerId     String
  employeeId     String
  isActive       Boolean   @default(true)
  isSetteled     Boolean
  amount         Float
  discount       Float     @default(0)
  gst            Float     @default(0)
  serviceCharges Float     @default(0)
  totalAmount    Float
  roundoffDiff   Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  order          Order     @relation(fields: [orderId], references: [id])
  shop           Shop      @relation(fields: [shopId], references: [id])
  employee       User      @relation(fields: [employeeId], references: [id])
  customer       Customer  @relation(fields: [customerId], references: [id])
  payments       Payment[]
}

model Payment {
  id             String   @id @default(uuid())
  billId         String
  amountRecieved Float
  paymentMode    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bill           Billing  @relation(fields: [billId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum ServingTime {
  BREAKFAST
  LUNCH
  DINNER
}
